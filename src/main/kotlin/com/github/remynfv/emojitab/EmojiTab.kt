package com.github.remynfv.emojitab

import com.comphenix.packetwrapper.WrapperPlayServerPlayerInfo
import com.comphenix.packetwrapper.WrapperPlayServerScoreboardTeam
import com.comphenix.packetwrapper.WrapperPlayServerScoreboardTeam.Mode
import com.comphenix.protocol.ProtocolLibrary
import com.comphenix.protocol.ProtocolManager
import com.comphenix.protocol.wrappers.*
import com.github.remynfv.emojitab.commands.EmojiCommand
import com.github.remynfv.emojitab.utils.Configs
import com.github.remynfv.emojitab.utils.Messager
import com.github.remynfv.emojitab.utils.Permissions
import com.github.remynfv.emojitab.utils.Settings
import org.bukkit.Bukkit
import org.bukkit.configuration.InvalidConfigurationException
import org.bukkit.configuration.file.FileConfiguration
import org.bukkit.configuration.file.YamlConfiguration
import org.bukkit.entity.Player
import org.bukkit.plugin.java.JavaPlugin
import java.io.File
import java.io.IOException
import java.util.*

private const val teamName: String = "zzzzzzzzz_emoji_tab" // Team used for sorting the player list.
class EmojiTab : JavaPlugin()
{
    //From config.yml
    var usePermissions: Boolean = true
    var individualPermissions: Boolean = false
    var verbose: Boolean = false
    var wrappingCharacter: String = ""

    /**
     * Texture to be used for fake player skins.
     *
     * Defaults to a gray skin courtesy of someone off mineskin.org ( https://mineskin.org/14b3cfc390dc440282195d8a74b742f4 )
     * Can be modified in [reloadConfigs].
     * @see signature
     */
    private var texture: String = "ewogICJ0aW1lc3RhbXAiIDogMTYyMTQxMTE5MDkyMywKICAicHJvZmlsZUlkIiA6ICJmZDQ3Y2I4YjgzNjQ0YmY3YWIyYmUxODZkYjI1ZmMwZCIsCiAgInByb2ZpbGVOYW1lIiA6ICJDVUNGTDEyIiwKICAic2lnbmF0dXJlUmVxdWlyZWQiIDogdHJ1ZSwKICAidGV4dHVyZXMiIDogewogICAgIlNLSU4iIDogewogICAgICAidXJsIiA6ICJodHRwOi8vdGV4dHVyZXMubWluZWNyYWZ0Lm5ldC90ZXh0dXJlLzQ4NDYxNmVhNDI0OTk1NzI4OGE5Y2Y4ZTNhM2E0ZjVjZDU0NDYxNjk1ZTczMmM5ZWViOTA4NDBmZDRkYzg3YjQiLAogICAgICAibWV0YWRhdGEiIDogewogICAgICAgICJtb2RlbCIgOiAic2xpbSIKICAgICAgfQogICAgfQogIH0KfQ=="

    /**
     * Signature to go with [texture].
     */
    private var signature: String = "vAk/+xJkgEYANJq2FxjfX4xT5Lo+z1+YNnvWPUgLnpwgj3Vq1nqKZ24y0mHbsLROE3JCnOW1vJObFyNRBktInFXX5RhAv8yis/TSyFFhR3rjnC8ZEMSlM0gyy2K9nJxjY+jDSVBNBaBmWs1JbhPWl2zN/eaMEMivAwZmBLqhTLIV/o4IAUAIPDkxdEw5MGtp81wEot1YSMc1PkGYANx7VTGUy2eCe4AhjDgUrWLkGPkSWeCowU1xQzT5DeWw5V6sylRWXR7DTkzonteRA5jO4gXrXXt5CdytGbz8SOT9V2xnhUPbnRZOgeRKwwHphAJ4N+g2+C5BGxrfSlnmj8YZKAlM17YEK2ej1eClxmmxIW/2bjZnCJR0U7f750evnXb6ZcjIQ+P400RpSCUo79L9cbvz3rHU36IcHKl3GmGG9uyr15C6DVa5WGj5A19fmzIMyRG5e5GTH6NPVC+yK5R0M36in88iP1HQFY9CdPn9NixrdRcCcXPcOcKFsNXE6la+UMhSlsXX+FS5zGtMvTedn5fPglP0DWur9Iz4Z/Bk5ZoZ93NdpF/h63rLZG9xYBs+gf8UEESPRykZSB2wIRO4039s3TC4g8i/lUBn4Zt6IpUiXip9rK7ihKdy3bVX8YywxmCL9oqhfQK0jnFk1dPDBCs/QDMCYnP4fLkLEqPZRrI="

    /**
     * Contents of emojis.yml. Set by [createEmojiListConfig].
     */
    lateinit var emojisConfig: FileConfiguration
        private set

    //The Great Emojifier class, where most of the work gets done
    lateinit var emojifier: Emojifier

    /**
     * The "textures" property that contains the skin information for the autogenerated emoji players.
     */
    private lateinit var defaultTexturesProperty: WrappedSignedProperty //Init in generateEmojiPackets

    /**
     * Packet to add all emojis.
     */
    private lateinit var addEmojisPacket: WrapperPlayServerPlayerInfo

    /**
     * Packet to remove all emojis.
     */
    var removeEmojisPacket: WrapperPlayServerPlayerInfo? = null

    /**
     * Packet to sort fake players in the tab menu.
     *
     * Works by creating a team called "zzzzzzzzz_emoji_tab" [teamName]
     * which includes all the fake players in it.
     *
     * This sorts the fake players to the bottom alphabetically.
     * Because it's sent via packets, it is persistent through scoreboard changes.
     */
    private lateinit var teamPacket: WrapperPlayServerScoreboardTeam


    private lateinit var protocolManager: ProtocolManager

    override fun onEnable()
    {
        // Disable and warn if attempting to load on Spigot/Bukkit.
        try
        {
            Class.forName("io.papermc.paper.configuration.Configuration")
        }
        catch (e: ClassNotFoundException)
        {
            logger.warning("This plugin currently only supports Paper!")
            pluginLoader.disablePlugin(this)
            return
        }

        // Plugin startup logic
        Messager.send("Loaded!")

        //Init protocol manager
        protocolManager = ProtocolLibrary.getProtocolManager()

        Bukkit.shouldSendChatPreviews()

        //Save Configs
        saveDefaultConfig()

        //Initialize emoji list
        emojifier = Emojifier(this)

        //(Re)load configs for the first time
        reloadConfigs()

        //Register commands
        getCommand("emoji")!!.setExecutor(EmojiCommand(this))

        //Register events
        server.pluginManager.registerEvents(Events(this), this)

        for (player in Bukkit.getOnlinePlayers())
            trySendEmojiPacket(player) // Load emojis for any players who are online after /reload
    }

    private fun generateEmojiPackets()
    {
        //Create a list of players of size = emojiMap.keys.size
        addEmojisPacket = WrapperPlayServerPlayerInfo()
        addEmojisPacket.action = EnumWrappers.PlayerInfoAction.ADD_PLAYER

        //Create a packet for the teams.
        teamPacket = WrapperPlayServerScoreboardTeam()

        val info = ArrayList<PlayerInfoData>()
        for (emoji in emojifier.emojiList)
        {
            val randomUUID = UUID.randomUUID()
            val gameProfile = WrappedGameProfile(randomUUID, emoji.shortCode)
            defaultTexturesProperty = WrappedSignedProperty("textures", texture, signature)
            gameProfile.properties.put("textures", defaultTexturesProperty)
            info.add(PlayerInfoData(gameProfile, 0, EnumWrappers.NativeGameMode.SURVIVAL, WrappedChatComponent.fromText("")))

            teamPacket.players.add(emoji.shortCode)
        }
        addEmojisPacket.data = info

        //Configure an identical packet to do the reverse.
        val removeEmojisPacket = WrapperPlayServerPlayerInfo()
        removeEmojisPacket.data = addEmojisPacket.data
        removeEmojisPacket.action = EnumWrappers.PlayerInfoAction.REMOVE_PLAYER
        this.removeEmojisPacket = removeEmojisPacket

        //Finish up the team packet
        teamPacket.mode = Mode.TEAM_CREATED
        teamPacket.name = teamName
    }

    /**
     * Sends all the emoji packets to the player, if they have permission and have emojis enabled.
     */
    fun trySendEmojiPacket(player: Player)
    {
        //If player has emojis disabled don't send them the players OR the fakeplayers
        if (Settings.getEmojiDisabled(player)
            || !(player.hasPermission(Permissions.USE) || !usePermissions))
            return

        addEmojisPacket.sendPacket(player)
        teamPacket.sendPacket(player)
    }

    override fun onDisable()
    {
        removeEmojisPacket?.broadcastPacket() // Clear the player list when using /reload or on a crash.
    }

    /**
     * Reload all configs and fake players.
     */
    fun reloadConfigs()
    {
        reloadConfig()

        //Load config.yml settings in variables
        config.getString(Configs.WRAPPING_CHARACTER)?.let { wrappingCharacter = it }
        config.getBoolean(Configs.USE_PERMISSIONS).let { usePermissions = it }
        config.getBoolean(Configs.INDIVIDUAL_PERMISSIONS).let { individualPermissions = it }
        config.getBoolean(Configs.VERBOSE_BOOT).let { verbose = it }

        //Load custom skins
        val texture = config.getString(Configs.TEXTURE)
        val signature = config.getString(Configs.SIGNATURE)
        if (!texture.isNullOrBlank() && !signature.isNullOrBlank())
        {
            this.texture = texture
            this.signature = signature
        }

        // Clear the tab list before we add it.
        removeEmojisPacket?.broadcastPacket()

        createEmojiListConfig() //Load emojis.yml into a variable

        //Load emojis into hashmap
        emojifier.loadEmojisFromConfig()

        //Create the packet to be sent out to players
        generateEmojiPackets()
    }

    /**
     * Load emojis.yml into [emojisConfig]
     */
    private fun createEmojiListConfig()
    {
        val emojisConfigFile = File(dataFolder, "emojis.yml")

        //Create emojis.yml if it doesn't exist yet.
        if (!emojisConfigFile.exists())
        {
            emojisConfigFile.parentFile.mkdirs()
            saveResource("emojis.yml", false)
        }

        //Load 'em in and hope it doesn't break
        emojisConfig = YamlConfiguration()
        try
        {
            emojisConfig.load(emojisConfigFile)
        } catch (e: IOException)
        {
            e.printStackTrace()
        } catch (e: InvalidConfigurationException)
        {
            e.printStackTrace()
        }
    }
}